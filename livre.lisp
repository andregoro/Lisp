;;  (setq x 0)
;; (setq y 34.567)
;; (setq ch nil)
;; (setq n 123.78)
;; (setq bg 11.0e+4)
;; (setq r 124/2)

;; (print x)
;; (print y)
;; (print n)
;; (print ch)
;; (print bg)
;; (print r)
;; (terpri)
;; ;; (defun add-all(n)
;; ;;    (+ 1 2 3 4)
;; ;; )
;; (defun setz()
;;    (write "s")
;; )
;; (defmacro to()
;;    (print 10)
;; )

;; (loop
;;    (setq x (+ x 1))
;;    (write x)
;;    (terpri)
;;    (when (= x 10)
;;       (return x)
;;    )
;; )

;; (loop for x in '(andre gta harry)
;;    do (print x)
;; )

;; (do ((x 0 (+ 2 x)) (y 20 ( - y 2)))
;;       ((= x y)(- x y))
;;    (format t "~% x = ~d  y = ~d" x y)
;; )

;; (dotimes (n 11)
;;    (print n)
;; )

;; (loop for a from 10 to 20
;;    do (print a)
;; )

;; (setz)
;; (to)
;; ((lambda (x) (* x 2)) 3)
;; (write add-all(1))
;; (setq d 10)
;; (loop
;;    (write d)(terpri)
;;    (setq d (+ 1 d))
;;    (when (> d 20)
;;       (return d)
;;    )
;; )
;; (dotimes (n 11)
;;    (setq f (+ 9 n))
;;    (write f)
;;    (terpri)
;; )
;; (dotimes(n 90)
;;    (print n)
;; )

;; (setq n 0)
;; (loop
;;    (write n)
;;    (setq n (+ n 1))
;;    (when (> n 5)
;;       (return n)
;;    )
;; )

;; (loop for a from 10 to 20 do
;; (print a)
;; )
;;:;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; (defun averagenum(n m)
;;    (/ ( + n m )2)
;; )
;; (print (averagenum 2 2))
;; (terpri)
;; (write ((lambda (a b c x)
;;    (+ (* a (* x x)) (* b x) c))
;;    4 2 9 3)
;; )
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; (write (setf array (make-array '(10))))
;; (terpri)
;; (setf (aref array 0) 25)
;; (setf (aref array 1) 43)
;; (write array)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; (write (cons 1 2))
;; (terpri)
;; (write (cons 'a 'b))
;; (terpri)
;; (write (cons 1 nil))
;; (terpri)
;; (write (cons 1 (cons 2 nil)))
;; (terpri)
;; (write (cons 1 (cons 2 (cons 3 nil))))
;; (terpri)
;; (write (cons 'a (cons 'b (cons 'c nil))))
;; (terpri)
;; (write ( car (cons 'a (cons 'b (cons 'c nil)))))
;; (terpri)
;; (write ( cdr (cons 'a (cons 'b (cons 'c nil)))))
;;
;; (defun fun(num)
;;     (dotimes(n (+ num 1))
;;         (if (= (mod n 2) 0)
;;             (print n)
;;             (print "impar")
;;         )
;;     )
;; )
(defun fun(esc num)
    (setq n 0)
    (case esc
        (1
            (loop for a from 0 to num
                do
                (print "loop for")
                (write a)
            )
        )
        (2
            (dotimes(n num)
                (print "dotimes")
                (write n)
            )
        )
        (3
            (loop
                (print "loop")
                (write n)
                (when (> n num)
                    (return n)
                )
               (setq n (+ n 1))
            )
        )
    )
)

;; (loop
;;     (print "Escolha o loop")
;;     (setq l(read))

;;     (print "Tamanho")
;;     (setq num(read))

;;     (fun l num)
;; ;;    (print)

;;     (setq sair(read))
;;     (when (eq "sim" sair)
;;         (break )
;;     )
;; )
;Array
(setf x (make-array '(3)))
(setf (aref x 0) 10)
(setf (aref x 1) 10)
(setf (aref x 2) 10)
;(setf )
(print (aref x 0))
;vector
(setf vet (vector 1 2 3 4 5))
;; (vector-push vet 50)
(print (aref vet 1))
;set
(defparameter *myset*())
(adjoin 1 *myset*)
(adjoin 2 *myset*)
;(write *myset*)
(setf *myset* (adjoin 1 *myset*))
(setf *myset* (adjoin 2 *myset*))
(write *myset*)
(terpri)
(pushnew 2 *myset*)
(write *myset*)
(terpri)
(pushnew 2 *myset*)
(pushnew 3 *myset*)
(write *myset*)
(terpri)

;; (setq lst (list '(1 2) '(3 4) '(5 6) '(10 20 (15)) '1))
;; (setq mylst (copy-list lst))
;; (setq tr (copy-tree lst))

;; (write lst)
;; (terpri)
;; (write mylst)
;; (terpri)
;; (write tr)
(write "------------------------------------------")
(terpri)

(cond
    ((> 1 20)(write "n"))
    ((write "s"))
)
(terpri)
(if (< 1 20)
(write "n")
)


(setq empList (make-hash-table))
(setf (gethash '001 empList) '(Charlie Brown))
(setf (gethash '002 empList) '(Freddie Seal))
;(write (gethash '001 empList))
(terpri)
;(write (gethash '002 empList))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(write (setf (get 'books'title)'(Vou com a wind)))
(terpri)
(write (setf (get 'books 'author) '(Margaret Michel)))
(terpri)

(setf (get 'lista 'idade)43)
(setf (get 'lista 'job)'killer)
(write (symbol-plist 'lista))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(setq v1 (vector 1 2 3 4 5))
(setq v2 #(a b c d e))
(setq b 2)
(setq a (make-array 5 :initial-element 0))
(terpri)
(write v1)
(terpri)
(write v2)
(dotimes (i 5)
    (setf (aref a (+ 1 b)) i)
)

(write a)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

